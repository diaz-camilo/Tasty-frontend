{"version":3,"sources":["components/Recipe.jsx","components/RecipeListing.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Recipe","props","recipe","thumbnail_url","credits","thumbnail_alt_text","name","description","tags","instructions","useState","isHover","setIsHover","className","style","backgroundImage","onMouseEnter","ev","onMouseLeave","map","tag","display_name","id","RecipeListing","recipes","console","log","HEADERS","process","App","pageNum","setPageNum","resultsPerPage","setResultsPerPage","querryText","setQuerryText","setRecipes","isLoaded","setIsLoaded","setError","performTextSearch","options","method","url","BASE_URL","params","from","size","q","headers","axios","request","then","response","data","catch","err","useEffect","maxPages","Math","ceil","count","handlePageChange","increment","newPage","onSubmit","preventDefault","type","onChange","target","value","min","max","step","defaultValue","onClick","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d095e012.chunk.js","sourcesContent":["import \"./Recipe.css\";\nimport { useState } from \"react\";\n\nexport default function Recipe(props) {\n  const {\n    thumbnail_url,\n    thumbnail_alt_text,\n    credits,\n    description,\n    name,\n    tags,\n    instructions,\n  } = props.recipe;\n\n  const [isHover, setIsHover] = useState(false);\n\n  const handleMouseEnter = (ev) => setIsHover(true);\n  const handleMouseLeve = (ev) => setIsHover(false);\n\n  return (\n    <div\n      className=\"recipe\"\n      style={{ backgroundImage: `url(${thumbnail_url})` }}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeve}\n    >\n      <div>\n        <h2>{name}</h2>\n        <h4>by: {credits[0].name}</h4>\n      </div>\n\n      {isHover && (\n        <div className=\"tags\">\n          {tags.map((tag) => (\n            <span className=\"tag\" key={tag.id}>\n              {tag.display_name}\n            </span>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","import Recipe from \"./Recipe\";\nimport \"./RecipeListing.css\";\n\nfunction RecipeListing(props) {\n  const recipes = props.recipes.map((recipe) => (\n    <Recipe key={recipe.id} id={recipe.id} recipe={recipe} />\n  ));\n\n  console.log(props);\n  return <div className=\"recipe-listing\">{recipes}</div>;\n}\n\nexport default RecipeListing;\n","import \"./App.css\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport RecipeListing from \"./components/RecipeListing\";\n\nconst HEADERS = {\n  \"x-rapidapi-host\": \"tasty.p.rapidapi.com\",\n  \"x-rapidapi-key\": process.env.REACT_APP_TASTY_API_KEY,\n};\nconst BASE_URL = \"https://tasty.p.rapidapi.com/\";\n\nfunction App() {\n  const [pageNum, setPageNum] = useState(0);\n  const [resultsPerPage, setResultsPerPage] = useState(20);\n  const [querryText, setQuerryText] = useState(\"\");\n  const [recipes, setRecipes] = useState({});\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState({});\n\n  const performTextSearch = () => {\n    var options = {\n      method: \"GET\",\n      url: BASE_URL + \"recipes/list\",\n      params: {\n        from: pageNum * resultsPerPage,\n        size: resultsPerPage,\n        tags: \"\",\n        q: querryText,\n      },\n      headers: HEADERS,\n    };\n\n    axios\n      .request(options)\n      .then((response) => {\n        setRecipes(response.data);\n        setIsLoaded(true);\n      })\n      .catch((err) => {\n        setIsLoaded(false);\n        setError(err);\n      });\n  };\n\n  useEffect(() => {\n    performTextSearch();\n  }, [pageNum, resultsPerPage]);\n\n  const handleQuerryTextChange = (ev) => setQuerryText(ev.target.value);\n\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    setIsLoaded(false);\n    performTextSearch();\n  };\n\n  const handleResultsPerPageChange = (ev) => {\n    setResultsPerPage(ev.target.value);\n  };\n\n  const maxPages = Math.ceil(recipes.count / resultsPerPage);\n\n  const handlePageChange = (increment) => {\n    const newPage = pageNum + increment;\n    if (!(newPage < 0 || newPage > maxPages)) {\n      setIsLoaded(false);\n      setPageNum(newPage);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Recipes</h1>\n        <form onSubmit={handleSubmit}>\n          <label>\n            Enter querry:{\" \"}\n            <input type=\"text\" onChange={handleQuerryTextChange} />\n          </label>\n          <button>search</button>\n        </form>\n      </header>\n\n      <main>\n        <aside>\n          <input\n            type=\"range\"\n            min=\"10\"\n            max=\"40\"\n            step=\"5\"\n            defaultValue=\"20\"\n            onChange={handleResultsPerPageChange}\n          />\n          <label>{resultsPerPage}</label>\n          <br />\n          <button onClick={() => handlePageChange(-1)}>previous</button>\n          <button onClick={() => handlePageChange(1)}>next</button>\n          <br />\n          <label>\n            page: {pageNum}/{maxPages}\n          </label>\n        </aside>\n\n        {isLoaded ? (\n          <RecipeListing recipes={recipes.results} />\n        ) : (\n          <p>Loading...</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}