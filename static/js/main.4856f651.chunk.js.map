{"version":3,"sources":["components/Recipe.jsx","components/RecipeListing.jsx","App.js","reportWebVitals.js","index.js"],"names":["Recipe","props","recipe","thumbnail_url","credits","thumbnail_alt_text","name","description","tags","instructions","useState","isHover","setIsHover","className","style","backgroundImage","onMouseEnter","ev","onMouseLeave","map","tag","display_name","id","RecipeListing","recipes","console","log","HEADERS","process","App","pageNum","resultsPerPage","querryText","setQuerryText","setRecipes","isLoaded","setIsLoaded","setError","useEffect","options","method","url","BASE_URL","params","from","size","q","headers","axios","request","then","response","data","catch","err","type","onChange","target","value","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAGe,SAASA,EAAOC,GAC7B,MAQIA,EAAMC,OAPRC,EADF,EACEA,cAEAC,GAHF,EAEEC,mBAFF,EAGED,SAEAE,GALF,EAIEC,YAJF,EAKED,MACAE,EANF,EAMEA,KAIF,GAVA,EAOEC,aAG4BC,oBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,OACE,sBACEC,UAAU,SACVC,MAAO,CAAEC,gBAAgB,OAAD,OAASZ,EAAT,MACxBa,aAPqB,SAACC,GAAD,OAAQL,GAAW,IAQxCM,aAPoB,SAACD,GAAD,OAAQL,GAAW,IAGzC,UAME,6BAAKN,IACL,sCAASF,EAAQ,GAAGE,QACnBK,GACC,qBAAKE,UAAU,OAAf,SACGL,EAAKW,KAAI,SAACC,GAAD,OACR,sBAAMP,UAAU,MAAhB,SACGO,EAAIC,cADoBD,EAAIE,Y,MCnB5BC,MATf,SAAuBtB,GACrB,IAAMuB,EAAUvB,EAAMuB,QAAQL,KAAI,SAACjB,GAAD,OAChC,cAAC,EAAD,CAAwBoB,GAAIpB,EAAOoB,GAAIpB,OAAQA,GAAlCA,EAAOoB,OAItB,OADAG,QAAQC,IAAIzB,GACL,qBAAKY,UAAU,iBAAf,SAAiCW,KCJpCG,EAAU,CACd,kBAAmB,uBACnB,iBAAkBC,sDAuDLC,MAnDf,WACE,MAA8BnB,mBAAS,GAAvC,mBAAOoB,EAAP,KACA,GADA,KAC4CpB,mBAAS,KAArD,mBAAOqB,EAAP,KACA,GADA,KACoCrB,mBAAS,KAA7C,mBAAOsB,EAAP,KAAmBC,EAAnB,KACA,EAA8BvB,mBAAS,IAAvC,mBAAOc,EAAP,KAAgBU,EAAhB,KACA,EAAgCxB,oBAAS,GAAzC,mBAAOyB,EAAP,KAAiBC,EAAjB,KACA,EAA0B1B,mBAAS,IAAnC,mBAAc2B,GAAd,WA6BA,OA3BAC,qBAAU,WACR,IAAIC,EAAU,CACZC,OAAQ,MACRC,IAAKC,4CACLC,OAAQ,CACNC,KAAMd,EAAUC,EAChBc,KAAMd,EACNvB,KAAM,mBACNsC,EAAGd,GAELe,QAASpB,GAGXqB,IACGC,QAAQV,GACRW,MAAK,SAACC,GACLjB,EAAWiB,EAASC,MACpBhB,GAAY,MAEbiB,OAAM,SAACC,GACNlB,GAAY,GACZC,EAASiB,QAEZ,CAACxB,EAASC,EAAgBC,IAK3B,sBAAKnB,UAAU,MAAf,UACE,yCACA,mDACgB,uBAAO0C,KAAK,OAAOC,SANR,SAACvC,GAAD,OAAQgB,EAAchB,EAAGwC,OAAOC,aAQ3D,uBACCvB,EACC,cAAC,EAAD,CAAeX,QAASA,EAAQmC,UAEhC,+CC5COC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4856f651.chunk.js","sourcesContent":["import \"./Recipe.css\";\nimport { useState } from \"react\";\n\nexport default function Recipe(props) {\n  const {\n    thumbnail_url,\n    thumbnail_alt_text,\n    credits,\n    description,\n    name,\n    tags,\n    instructions,\n  } = props.recipe;\n\n  const [isHover, setIsHover] = useState(false);\n\n  const handleMouseEnter = (ev) => setIsHover(true);\n  const handleMouseLeve = (ev) => setIsHover(false);\n\n  return (\n    <div\n      className=\"recipe\"\n      style={{ backgroundImage: `url(${thumbnail_url})` }}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeve}\n    >\n      <h2>{name}</h2>\n      <h4>by: {credits[0].name}</h4>\n      {isHover && (\n        <div className=\"tags\">\n          {tags.map((tag) => (\n            <span className=\"tag\" key={tag.id}>\n              {tag.display_name}\n            </span>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","import Recipe from \"./Recipe\";\nimport \"./RecipeListing.css\";\n\nfunction RecipeListing(props) {\n  const recipes = props.recipes.map((recipe) => (\n    <Recipe key={recipe.id} id={recipe.id} recipe={recipe} />\n  ));\n\n  console.log(props);\n  return <div className=\"recipe-listing\">{recipes}</div>;\n}\n\nexport default RecipeListing;\n","import \"./App.css\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport RecipeListing from \"./components/RecipeListing\";\n\nconst HEADERS = {\n  \"x-rapidapi-host\": \"tasty.p.rapidapi.com\",\n  \"x-rapidapi-key\": process.env.REACT_APP_TASTY_API_KEY,\n};\nconst BASE_URL = \"https://tasty.p.rapidapi.com/\";\n\nfunction App() {\n  const [pageNum, setPageNum] = useState(0);\n  const [resultsPerPage, setResultsPerPage] = useState(20);\n  const [querryText, setQuerryText] = useState(\"\");\n  const [recipes, setRecipes] = useState({});\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState({});\n\n  useEffect(() => {\n    var options = {\n      method: \"GET\",\n      url: BASE_URL + \"recipes/list\",\n      params: {\n        from: pageNum * resultsPerPage,\n        size: resultsPerPage,\n        tags: \"under_30_minutes\",\n        q: querryText,\n      },\n      headers: HEADERS,\n    };\n\n    axios\n      .request(options)\n      .then((response) => {\n        setRecipes(response.data);\n        setIsLoaded(true);\n      })\n      .catch((err) => {\n        setIsLoaded(false);\n        setError(err);\n      });\n  }, [pageNum, resultsPerPage, querryText]);\n\n  const handleQuerryTextChange = (ev) => setQuerryText(ev.target.value);\n\n  return (\n    <div className=\"App\">\n      <h1>Recipes</h1>\n      <label>\n        Enter querry: <input type=\"text\" onChange={handleQuerryTextChange} />\n      </label>\n      <hr />\n      {isLoaded ? (\n        <RecipeListing recipes={recipes.results} />\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}